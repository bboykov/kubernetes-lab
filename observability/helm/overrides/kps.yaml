# Default values for kube-prometheus-stack: https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
nameOverride: "kps"
fullnameOverride: "kps"

crds:
  enabled: true

## Create default rules for monitoring the cluster
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: false
    configReloaders: true
    general: true
    k8s: true
    kubeApiserverAvailability: true
    kubeApiserverBurnrate: true
    kubeApiserverHistogram: true
    kubeApiserverSlos: true
    kubeControllerManager: true
    kubelet: true
    kubeProxy: false
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeSchedulerAlerting: true
    kubeSchedulerRecording: true
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true
    windows: false

  ## Reduce app namespace alert scope
  appNamespacesTarget: ".*"

  ## Prefix for runbook URLs. Use this to override the first part of the runbookURLs that is common to all rules.
  runbookUrl: "https://runbooks.prometheus-operator.dev/runbooks"

  ## Disabled PrometheusRule alerts
  disabled: {}
  # KubeAPIDown: true
  # NodeRAIDDegraded: true

global:
  rbac:
    create: true

## Configuration for alertmanager
## ref: https://prometheus.io/docs/alerting/alertmanager/
alertmanager:

  enabled: true

  alertmanagerSpec:

    externalUrl: "http://localhost"

    logFormat: json
    logLevel: info

    replicas: 1

    ## Time duration Alertmanager shall retain data for. Default is '120h', and must match the regular expression
    ## [0-9]+(ms|s|m|h) (milliseconds seconds minutes hours).
    retention: 120h

    affinity: {}


## Using default values from https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
grafana:
  enabled: true

  adminUser: admin
  adminPassword: prom-operator

  additionalDataSources:
    - name: Loki
      type: loki
      url: http://loki.loki-stack:3100

## Component scraping the kube api server
kubeApiServer:
  enabled: true

## Component scraping the kubelet and kubelet-hosted cAdvisor
kubelet:
  enabled: true

## Component scraping the kube controller manager
kubeControllerManager:
  enabled: false

## Component scraping coreDns. Use either this or kubeDns
coreDns:
  enabled: true

## Component scraping kubeDns. Use either this or coreDns
kubeDns:
  enabled: false

## Component scraping etcd
kubeEtcd:
  enabled: true

## Component scraping kube scheduler
kubeScheduler:
  enabled: false

## Component scraping kube proxy
kubeProxy:
  enabled: true

## Component scraping kube state metrics
kubeStateMetrics:
  enabled: true

## Deploy node exporter as a daemonset to all nodes
nodeExporter:
  enabled: true

## Manages Prometheus and Alertmanager components
prometheusOperator:
  enabled: true

  affinity: {}


## Deploy a Prometheus instance
##
prometheus:
  enabled: true

  ## Settings affecting prometheusSpec
  ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#prometheusspec
  ##
  prometheusSpec:

    ## External URL at which Prometheus will be reachable.
    ##
    externalUrl: "http://localhost"

    ## If true, a nil or {} value for prometheus.prometheusSpec.ruleSelector will cause the
    ## prometheus resource to be created with selectors based on values in the helm deployment,
    ## which will also match the PrometheusRule resources created
    ##
    ruleSelectorNilUsesHelmValues: false

    ## If true, a nil or {} value for prometheus.prometheusSpec.serviceMonitorSelector will cause the
    ## prometheus resource to be created with selectors based on values in the helm deployment,
    ## which will also match the servicemonitors created
    ##
    serviceMonitorSelectorNilUsesHelmValues: false

    ## If true, a nil or {} value for prometheus.prometheusSpec.podMonitorSelector will cause the
    ## prometheus resource to be created with selectors based on values in the helm deployment,
    ## which will also match the podmonitors created
    ##
    podMonitorSelectorNilUsesHelmValues: false

    ## If true, a nil or {} value for prometheus.prometheusSpec.probeSelector will cause the
    ## prometheus resource to be created with selectors based on values in the helm deployment,
    ## which will also match the probes created
    ##
    probeSelectorNilUsesHelmValues: false

    retention: 30d ## How long to retain metrics

    replicas: 1

    logLevel: info
    logFormat: json

    # resources:
    #   limits:
    #     cpu: 1200m
    #     memory: 7G
    #   requests:
    #     cpu: 1000m
    #     memory: 3Gi

    affinity: {}

## Setting to true produces cleaner resource names, but requires a data
## migration because the name of the persistent volume changes. Therefore this
## should only be set once on initial installation.
##
cleanPrometheusOperatorObjectNames: true
